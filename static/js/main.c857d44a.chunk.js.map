{"version":3,"sources":["components/answer/answer.js","components/preview/preview.js","components/actions/form-actions.js","components/form/formbuilder.js","App.js","reportWebVitals.js","components/reducers/form-reducer.js","index.js"],"names":["Answer","question","index","cbToUpdate","editable","React","useState","value","setValue","dropDownValue","setDropDownValue","updateValue","event","target","updateAnswers","answersList","toString","split","className","answerType","TextField","id","label","variant","multiline","rows","defaultValue","onChange","helperText","Button","onClick","length","FormControl","component","RadioGroup","row","name","map","option","FormControlLabel","control","Radio","Checkbox","sx","m","minWidth","InputLabel","Select","labelId","MenuItem","Preview","useSelector","state","questionsList","formHeading","formDescription","questionTitle","isRequired","style","color","saveFormAction","type","Formbuilder","noOfAnswers","answer","store","message","setMessage","setFormHeading","setFormDescription","setQuestionsList","dispatch","useDispatch","handleClose","handleQuestionChange","field","tempQuestionList","handleOptionsChange","Box","width","margin","noValidate","autoComplete","splice","duplicateQuestion","removeQuestion","Switch","checked","setTimeout","document","querySelector","scrollIntoView","behavior","block","inline","formErrorMessage","forEach","querySelectorAll","click","window","scrollTo","Snackbar","open","autoHideDuration","onClose","Alert","severity","App","bgcolor","Tabs","newValue","centered","Tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","formReducer","action","createStore","ReactDOM","render","getElementById"],"mappings":"4aAeaA,EAAS,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACpD,EAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CH,IAAMC,SAAS,IAAzD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEMC,EAAc,SAACC,GACnBJ,EAASI,EAAMC,OAAON,QAElBO,EAAgB,WACpBb,EAASc,YAAcR,EAAMS,WAAWC,MAAM,KAC9Cd,EAAWF,EAAUC,IAEvB,OACE,qCACGE,GAAY,+DACb,sBAAKc,UAAU,kBAAf,UAC2B,iBAAxBjB,EAASkB,YACR,8BACE,cAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,eACNC,QAAQ,eAIW,cAAxBtB,EAASkB,YACR,8BACE,cAACC,EAAA,EAAD,CACEC,GAAG,4BACHC,MAAM,mBACNE,WAAS,EACTC,KAAM,EACNC,aAAa,GACbH,QAAQ,eAIW,oBAAxBtB,EAASkB,YACR,gCACGf,GACC,sBAAKc,UAAU,qBAAf,UACE,cAACE,EAAA,EAAD,CACEO,SAAUhB,EACVU,GAAG,iBACHC,MAAM,UACNC,QAAQ,WACRK,WAAW,4DAEb,cAACC,EAAA,EAAD,CAAQN,QAAQ,OAAOO,QAAShB,EAAhC,+BAKHb,EAASc,YAAYgB,OAAS,GAC7B,cAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,SACE,cAACC,EAAA,EAAD,CACEC,KAAG,EACH,aAAW,SACXC,KAAK,0BAHP,SAKGnC,EAASc,YAAYsB,KAAI,SAACC,EAAQpC,GACjC,OACE,cAACqC,EAAA,EAAD,CACEhC,MAAO+B,EAEPE,QAAS,cAACC,EAAA,EAAD,IACTnB,MAAOgB,GAFFpC,aAWI,aAAxBD,EAASkB,YACR,gCACGf,GACC,sBAAKc,UAAU,qBAAf,UACE,cAACE,EAAA,EAAD,CACEO,SAAUhB,EACVU,GAAG,iBACHC,MAAM,UACNC,QAAQ,WACRK,WAAW,4DAEb,cAACC,EAAA,EAAD,CAAQN,QAAQ,OAAOO,QAAShB,EAAhC,+BAKJ,8BACGb,EAASc,YAAYsB,KAAI,SAACC,EAAQpC,GACjC,OACE,cAACqC,EAAA,EAAD,CAEEC,QAAS,cAACE,EAAA,EAAD,IACTpB,MAAOgB,GAFFpC,WASQ,aAAxBD,EAASkB,YACR,gCACGf,GACC,sBAAKc,UAAU,qBAAf,UACE,cAACE,EAAA,EAAD,CACEO,SAAUhB,EACVU,GAAG,iBACHC,MAAM,UACNC,QAAQ,WACRK,WAAW,4DAEb,cAACC,EAAA,EAAD,CAAQN,QAAQ,OAAOO,QAAShB,EAAhC,+BAKHb,EAASc,YAAYgB,OAAS,GAC7B,eAACC,EAAA,EAAD,CAAaT,QAAQ,WAAWoB,GAAI,CAAEC,EAAG,EAAGC,SAAU,KAAtD,UACE,cAACC,EAAA,EAAD,CAAYzB,GAAG,oCAAf,oBAGA,cAAC0B,EAAA,EAAD,CACEC,QAAQ,oCACR3B,GAAI,8BACJd,MAAOE,EACPkB,SAAU,SAACf,GAAD,OAAWF,EAAiBE,EAAMC,OAAON,QACnDe,MAAM,SALR,SAOGrB,EAASc,YAAYsB,KAAI,SAACC,EAAQpC,GACjC,OACE,cAAC+C,EAAA,EAAD,CAAsB1C,MAAO+B,EAA7B,SACGA,GADYpC,cAUJ,kBAAxBD,EAASkB,YAAkC,qDC1JvC+B,G,MAAU,WACrB,MAAwDC,aACtD,SAACC,GAAD,OAAWA,KADLC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,YAAaC,EAApC,EAAoCA,gBAGpC,OACE,mCACGF,EACC,sBAAKnC,UAAU,uBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,6BAAKoC,IACJC,GAAmB,6BAAKA,OAE3B,sBAAMrC,UAAU,YAAhB,kCACCmC,EAAchB,KAAI,SAACpC,EAAUC,GAC5B,OACEA,EAAQ,GACN,sBAAiBgB,UAAU,kBAA3B,UACE,8BACGhB,EAAQ,MACRD,EAASuD,cACTvD,EAASwD,YACR,sBAAMC,MAAO,CAAEC,MAAO,OAAtB,kBAGJ,cAAC,EAAD,CAAQ1D,SAAUA,EAAUG,UAAU,MAR9BF,SAelB,qBAAKgB,UAAU,uBAAf,SACE,+BACE,qCADF,yC,mCCpCG0C,EAAiB,SAACN,EAAaC,EAAiBF,GAC3D,MAAO,CACLQ,KAAM,OACNP,cACAC,kBACAF,kBCcSS,G,MAAc,WACzB,IAAM7D,EAAW,CACfuD,cAAe,GACfrC,WAAY,GACZ4C,YAAa,EACbhD,YAAa,GACb0C,YAAY,EACZO,OAAQ,IAEJC,EAAQd,aAAY,SAACC,GAAD,OAAWA,KACrC,EAA8B9C,mBAAS,IAAvC,mBAAO4D,EAAP,KAAgBC,EAAhB,KACA,EAAsC7D,mBAAS2D,EAAMX,aAAe,IAApE,mBAAOA,EAAP,KAAoBc,EAApB,KACA,EAA8C9D,mBAC5C2D,EAAMV,iBAAmB,IAD3B,mBAAOA,EAAP,KAAwBc,EAAxB,KAGA,EAA0C/D,mBACxC2D,EAAMZ,eAAiB,CAACpD,EAAUA,IADpC,mBAAOoD,EAAP,KAAsBiB,EAAtB,KAGMC,EAAWC,cAEXC,EAAc,WAClBN,EAAW,KAuBPO,EAAuB,SAACnE,EAAOL,EAAOyE,GAC1C,IAAMC,EAAmBvB,EACzBuB,EAAiB1E,GAAOyE,GAASpE,EACjC+D,EAAiB,YAAIM,KAGjBC,EAAsB,SAAC5E,EAAUC,GACrC,IAAM0E,EAAmBvB,EACzBuB,EAAiB1E,GAASD,EAC1BqE,EAAiB,YAAIM,KAsDvB,OACE,sBAAK1D,UAAU,uBAAf,UACE,cAACW,EAAA,EAAD,CAAQN,QAAQ,OAAOL,UAAU,aAAaY,QAnBhC,WAChBsC,EAAe,IACfC,EAAmB,IACnBC,EAAiB,CAACrE,EAAUA,IAC5BsE,EAASX,EAAe,GAAI,GAAI,MAe9B,wBAGA,eAACkB,EAAA,EAAD,CACE7C,UAAU,OACVU,GAAI,CACF,kBAAmB,CAAEC,EAAG,IAAKmC,MAAO,OAAQC,OAAQ,cAEtDC,YAAU,EACVC,aAAa,MANf,UAQE,cAAC9D,EAAA,EAAD,CACEb,MAAO+C,EACP3B,SAlGwB,SAACf,GAC/BwD,EAAexD,EAAMC,OAAON,QAkGtBe,MAAM,cACNC,QAAQ,aAEV,cAACH,EAAA,EAAD,CACEb,MAAOgD,EACP5B,SApGqB,SAACf,GAC5ByD,EAAmBzD,EAAMC,OAAON,QAoG1Be,MAAM,8BACNC,QAAQ,aAEV,8BACG8B,EAActB,OAAS,GACtBsB,EAAchB,KAAI,SAACpC,EAAUC,GAC3B,OACEA,EAAQ,GACN,sBAAiBgB,UAAU,gBAA3B,UACE,cAACE,EAAA,EAAD,CACEO,SAAU,SAACf,GAAD,OACR8D,EACE9D,EAAMC,OAAON,MACbL,EACA,kBAGJK,MAAON,EAASuD,cAChBlC,MAAK,mBAAcpB,EAAd,KACLqB,QAAQ,aAEV,eAACS,EAAA,EAAD,CACET,QAAQ,WACRoB,GAAI,CAAEC,EAAG,EAAGC,SAAU,KAFxB,UAIE,cAACC,EAAA,EAAD,CAAYzB,GAAG,oCAAf,0BAGA,eAAC0B,EAAA,EAAD,CACEC,QAAQ,oCACR3B,GAAI,+BAAiCnB,EACrCK,MAAON,EAASkB,WAChBQ,SAAU,SAACf,GAAD,OACR8D,EACE9D,EAAMC,OAAON,MACbL,EACA,eAGJoB,MAAM,eAXR,UAaE,cAAC2B,EAAA,EAAD,CAAU1C,MAAO,eAAjB,0BACA,cAAC0C,EAAA,EAAD,CAAU1C,MAAO,YAAjB,uBACA,cAAC0C,EAAA,EAAD,CAAU1C,MAAO,kBAAjB,6BAGA,cAAC0C,EAAA,EAAD,CAAU1C,MAAO,WAAjB,sBACA,cAAC0C,EAAA,EAAD,CAAU1C,MAAO,WAAjB,sBACA,cAAC0C,EAAA,EAAD,CAAU1C,MAAO,gBAAjB,iCAKHN,EAASkB,YACR,cAAC,EAAD,CACElB,SAAUA,EACVC,MAAOA,EACPC,WAAY0E,EACZzE,UAAU,IAGd,sBAAKc,UAAU,mBAAf,UACE,cAACW,EAAA,EAAD,CACEN,QAAQ,YACR,aAAW,0BACXO,QAAS,kBAlKL,SAAC5B,GACzB,IAAM0E,EAAmBvB,EACzBuB,EAAiBO,OAAOjF,EAAQ,EAAG,EAAG0E,EAAiB1E,IACvDoE,EAAiB,YAAIM,IA+JcQ,CAAkBlF,IAHnC,uBAOA,cAAC2B,EAAA,EAAD,CACEN,QAAQ,YACR,aAAW,0BACXO,QAAS,kBAnKR,SAAC5B,GACtB,IAAM0E,EAAmBvB,EACzBuB,EAAiBO,OAAOjF,EAAO,GAC/BoE,EAAiB,YAAIM,IAgKcS,CAAenF,IAHhC,oBAOA,cAACqC,EAAA,EAAD,CACEC,QACE,cAAC8C,EAAA,EAAD,CACE3D,SAAU,SAACf,GAAD,OACR8D,EACE9D,EAAMC,OAAO0E,QACbrF,EACA,iBAKRoB,MAAM,mBAhFFpB,QAwFpB,cAAC2B,EAAA,EAAD,CACEN,QAAQ,WACR,aAAW,0BACXO,QApIY,WAClBwC,EAAiB,GAAD,mBAAKjB,GAAL,CAAoBpD,KACpCuF,YAAW,WAAO,IAAD,EACf,UAAAC,SAASC,cAAc,oCAAvB,SAAqDC,eAAe,CAClEC,SAAU,SACVC,MAAO,SACPC,OAAQ,cAET,MAyHC,0BAOA,cAACjE,EAAA,EAAD,CACEN,QAAQ,YACR,aAAW,0BACXO,QAnLS,WACf,GAAKwB,EAAL,CAIA,IAAIyC,EAAmB,GACvB,YAAI1C,GAAe2C,SAAQ,SAAC/F,EAAUC,GAChCA,EAAQ,IACLD,EAASuD,cAEFvD,EAASkB,WAIa,IAAhClB,EAASc,YAAYgB,QACI,oBAAxB9B,EAASkB,YACgB,aAAxBlB,EAASkB,YACe,aAAxBlB,EAASkB,aAEX4E,EACE,sDAAwD7F,GAT1D6F,EACE,gDAAkD7F,EAHpD6F,EAAmB,yCAA2C7F,MAehE6F,EACF5B,EAAW4B,IAGbxB,EAASX,EAAeN,EAAaC,EAAiBF,IACtDc,EAAW,8BACXsB,SAASQ,iBAAiB,kCAAkC,GAAGC,QAC/DC,OAAOC,SAAS,EAAG,SA7BjBjC,EAAW,oCA8KT,0BAQF,cAACkC,EAAA,EAAD,CACEC,OAAMpC,EACNqC,iBAAkB,IAClBC,QAAS/B,EAHX,SAKE,cAACgC,EAAA,EAAD,CACED,QAAS/B,EACTiC,UAAiB,OAAPxC,QAAO,IAAPA,OAAA,EAAAA,EAASjD,MAAM,KAAK,KAAM,UACpC0B,GAAI,CAAEoC,MAAO,QAHf,gBAKGb,QALH,IAKGA,OALH,EAKGA,EAASjD,MAAM,KAAK,YC9OhB0F,MAzBf,WACE,MAA0BtG,WAAe,GAAzC,mBAAOE,EAAP,KAAcC,EAAd,KAMA,OACE,sBAAKU,UAAU,UAAf,UACE,6DACA,qBAAKA,UAAU,qBAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC4D,EAAA,EAAD,CAAKnC,GAAI,CAAEoC,MAAO,OAAQ6B,QAAS,oBAAnC,SACE,eAACC,EAAA,EAAD,CAAMtG,MAAOA,EAAOoB,SAVT,SAACf,EAAOkG,GAC3BtG,EAASsG,IAS2CC,UAAQ,EAApD,UACE,cAACC,EAAA,EAAD,CAAK1F,MAAM,eACX,cAAC0F,EAAA,EAAD,CAAK1F,MAAM,iBAGdf,EAAQ,cAAC,EAAD,IAAc,cAAC,EAAD,a,gBCZlB0G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCPRQ,EAAY,CAChBpE,YAAa,GACbC,gBAAiB,GACjBF,cAAe,IAcFsE,EAZK,WAAgC,IAA/BvE,EAA8B,uDAAtBsE,EAAWE,EAAW,uCACjD,MAAoB,SAAhBA,EAAO/D,KACF,2BACFT,GADL,IAEEE,YAAasE,EAAOtE,YACpBC,gBAAiBqE,EAAOrE,gBACxBF,cAAeuE,EAAOvE,gBAGnBD,GCJHa,EAAQ4D,YAAYF,GAE1BG,IAASC,OACP,cAAC,IAAD,CAAU9D,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFwB,SAASuC,eAAe,SAM1Bf,M","file":"static/js/main.c857d44a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  Radio,\r\n  Checkbox,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport \"./answer.css\";\r\n\r\nexport const Answer = ({ question, index, cbToUpdate, editable }) => {\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [dropDownValue, setDropDownValue] = React.useState(\"\");\r\n\r\n  const updateValue = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n  const updateAnswers = () => {\r\n    question.answersList = value.toString().split(\",\");\r\n    cbToUpdate(question, index);\r\n  };\r\n  return (\r\n    <>\r\n      {editable && <h6>Please enter the Answer below</h6>}\r\n      <div className=\"answers-section\">\r\n        {question.answerType === \"Short Answer\" && (\r\n          <div>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Short Answer\"\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n        )}\r\n        {question.answerType === \"Paragraph\" && (\r\n          <div>\r\n            <TextField\r\n              id=\"standard-multiline-static\"\r\n              label=\"Paragraph Answer\"\r\n              multiline\r\n              rows={4}\r\n              defaultValue=\"\"\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n        )}\r\n        {question.answerType === \"Multiple Choice\" && (\r\n          <div>\r\n            {editable && (\r\n              <div className=\"add-option-section\">\r\n                <TextField\r\n                  onChange={updateValue}\r\n                  id=\"standard-basic\"\r\n                  label=\"Options\"\r\n                  variant=\"standard\"\r\n                  helperText=\"Enter Options separated by comma(,) Eg: Option1,Option2\"\r\n                />\r\n                <Button variant=\"text\" onClick={updateAnswers}>\r\n                  + Save Options\r\n                </Button>\r\n              </div>\r\n            )}\r\n            {question.answersList.length > 0 && (\r\n              <FormControl component=\"fieldset\">\r\n                <RadioGroup\r\n                  row\r\n                  aria-label=\"gender\"\r\n                  name=\"row-radio-buttons-group\"\r\n                >\r\n                  {question.answersList.map((option, index) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        value={option}\r\n                        key={index}\r\n                        control={<Radio />}\r\n                        label={option}\r\n                      />\r\n                    );\r\n                  })}\r\n                </RadioGroup>\r\n              </FormControl>\r\n            )}\r\n          </div>\r\n        )}\r\n        {question.answerType === \"Checkbox\" && (\r\n          <div>\r\n            {editable && (\r\n              <div className=\"add-option-section\">\r\n                <TextField\r\n                  onChange={updateValue}\r\n                  id=\"standard-basic\"\r\n                  label=\"Options\"\r\n                  variant=\"standard\"\r\n                  helperText=\"Enter Options separated by comma(,) Eg: Option1,Option2\"\r\n                />\r\n                <Button variant=\"text\" onClick={updateAnswers}>\r\n                  + Save Options\r\n                </Button>\r\n              </div>\r\n            )}\r\n            <div>\r\n              {question.answersList.map((option, index) => {\r\n                return (\r\n                  <FormControlLabel\r\n                    key={index}\r\n                    control={<Checkbox />}\r\n                    label={option}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n        {question.answerType === \"DropDown\" && (\r\n          <div>\r\n            {editable && (\r\n              <div className=\"add-option-section\">\r\n                <TextField\r\n                  onChange={updateValue}\r\n                  id=\"standard-basic\"\r\n                  label=\"Options\"\r\n                  variant=\"standard\"\r\n                  helperText=\"Enter Options separated by comma(,) Eg: Option1,Option2\"\r\n                />\r\n                <Button variant=\"text\" onClick={updateAnswers}>\r\n                  + Save Options\r\n                </Button>\r\n              </div>\r\n            )}\r\n            {question.answersList.length > 0 && (\r\n              <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                <InputLabel id=\"demo-simple-select-standard-label\">\r\n                  Answer\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-standard-label\"\r\n                  id={\"demo-simple-select-standard\"}\r\n                  value={dropDownValue}\r\n                  onChange={(event) => setDropDownValue(event.target.value)}\r\n                  label=\"Answer\"\r\n                >\r\n                  {question.answersList.map((option, index) => {\r\n                    return (\r\n                      <MenuItem key={index} value={option}>\r\n                        {option}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n          </div>\r\n        )}\r\n        {question.answerType === \"Date and Time\" && <div>Coming Soon</div>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Answer } from \"../answer/answer\";\r\nimport \"./preview.css\";\r\nexport const Preview = () => {\r\n  const { questionsList, formHeading, formDescription } = useSelector(\r\n    (state) => state\r\n  );\r\n  return (\r\n    <>\r\n      {questionsList ? (\r\n        <div className=\"form-preview-section\">\r\n          <div className=\"form-heading-section\">\r\n            <h4>{formHeading}</h4>\r\n            {formDescription && <h5>{formDescription}</h5>}\r\n          </div>\r\n          <span className=\"mand-text\">* Mandatory Question</span>\r\n          {questionsList.map((question, index) => {\r\n            return (\r\n              index > 0 && (\r\n                <div key={index} className=\"preview-answers\">\r\n                  <p>\r\n                    {index + \"). \"}\r\n                    {question.questionTitle}\r\n                    {question.isRequired && (\r\n                      <span style={{ color: \"red\" }}>*</span>\r\n                    )}\r\n                  </p>\r\n                  <Answer question={question} editable={false} />\r\n                </div>\r\n              )\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div className=\"no-preview-container\">\r\n          <h5>\r\n            <span>!</span> You have no Forms to Preview\r\n          </h5>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","export const saveFormAction = (formHeading, formDescription, questionsList) => {\r\n  return {\r\n    type: \"save\",\r\n    formHeading,\r\n    formDescription,\r\n    questionsList,\r\n  };\r\n};\r\n","import {\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  FormControlLabel,\r\n  Switch,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { saveFormAction } from \"../actions/form-actions\";\r\nimport { Answer } from \"../answer/answer\";\r\nimport \"./formbuilder.css\";\r\n\r\nexport const Formbuilder = () => {\r\n  const question = {\r\n    questionTitle: \"\",\r\n    answerType: \"\",\r\n    noOfAnswers: 0,\r\n    answersList: [],\r\n    isRequired: false,\r\n    answer: \"\",\r\n  };\r\n  const store = useSelector((state) => state);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [formHeading, setFormHeading] = useState(store.formHeading || \"\");\r\n  const [formDescription, setFormDescription] = useState(\r\n    store.formDescription || \"\"\r\n  );\r\n  const [questionsList, setQuestionsList] = useState(\r\n    store.questionsList || [question, question]\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = () => {\r\n    setMessage(\"\");\r\n  };\r\n\r\n  const handleFormHeadingChange = (event) => {\r\n    setFormHeading(event.target.value);\r\n  };\r\n\r\n  const handleFormDescChange = (event) => {\r\n    setFormDescription(event.target.value);\r\n  };\r\n\r\n  const duplicateQuestion = (index) => {\r\n    const tempQuestionList = questionsList;\r\n    tempQuestionList.splice(index + 1, 0, tempQuestionList[index]);\r\n    setQuestionsList([...tempQuestionList]);\r\n  };\r\n\r\n  const removeQuestion = (index) => {\r\n    const tempQuestionList = questionsList;\r\n    tempQuestionList.splice(index, 1);\r\n    setQuestionsList([...tempQuestionList]);\r\n  };\r\n\r\n  const handleQuestionChange = (value, index, field) => {\r\n    const tempQuestionList = questionsList;\r\n    tempQuestionList[index][field] = value;\r\n    setQuestionsList([...tempQuestionList]);\r\n  };\r\n\r\n  const handleOptionsChange = (question, index) => {\r\n    const tempQuestionList = questionsList;\r\n    tempQuestionList[index] = question;\r\n    setQuestionsList([...tempQuestionList]);\r\n  };\r\n\r\n  const saveForm = () => {\r\n    if (!formHeading) {\r\n      setMessage(\"error,Please Enter Form Heading\");\r\n      return;\r\n    }\r\n    let formErrorMessage = \"\";\r\n    [...questionsList].forEach((question, index) => {\r\n      if (index > 0) {\r\n        if (!question.questionTitle) {\r\n          formErrorMessage = \"error,Please Enter Title for Question \" + index;\r\n        } else if (!question.answerType) {\r\n          formErrorMessage =\r\n            \"error,Please select Answer Type for Question \" + index;\r\n        } else if (\r\n          question.answersList.length === 0 &&\r\n          (question.answerType === \"Multiple Choice\" ||\r\n            question.answerType === \"Checkbox\" ||\r\n            question.answerType === \"DropDown\")\r\n        ) {\r\n          formErrorMessage =\r\n            \"error,Please Enter Atleast One Option for Question \" + index;\r\n        }\r\n      }\r\n    });\r\n    if (formErrorMessage) {\r\n      setMessage(formErrorMessage);\r\n      return;\r\n    }\r\n    dispatch(saveFormAction(formHeading, formDescription, questionsList));\r\n    setMessage(\"success,Successfully Saved\");\r\n    document.querySelectorAll(\".MuiTabs-centered .MuiTab-root\")[1].click();\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormHeading(\"\");\r\n    setFormDescription(\"\");\r\n    setQuestionsList([question, question]);\r\n    dispatch(saveFormAction(\"\", \"\", \"\"));\r\n  };\r\n  const addQuestion = () => {\r\n    setQuestionsList([...questionsList, question]);\r\n    setTimeout(() => {\r\n      document.querySelector(\".each-question:last-child\")?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"center\",\r\n        inline: \"nearest\",\r\n      });\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-builder-section\">\r\n      <Button variant=\"text\" className=\"reset-form\" onClick={resetForm}>\r\n        Reset Form\r\n      </Button>\r\n      <Box\r\n        component=\"form\"\r\n        sx={{\r\n          \"& > :not(style)\": { m: \"1\", width: \"28ch\", margin: \"28px 30px\" },\r\n        }}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n      >\r\n        <TextField\r\n          value={formHeading}\r\n          onChange={handleFormHeadingChange}\r\n          label=\"Form Title*\"\r\n          variant=\"standard\"\r\n        />\r\n        <TextField\r\n          value={formDescription}\r\n          onChange={handleFormDescChange}\r\n          label=\"Form Description (Optional)\"\r\n          variant=\"standard\"\r\n        />\r\n        <div>\r\n          {questionsList.length > 0 &&\r\n            questionsList.map((question, index) => {\r\n              return (\r\n                index > 0 && (\r\n                  <div key={index} className=\"each-question\">\r\n                    <TextField\r\n                      onChange={(event) =>\r\n                        handleQuestionChange(\r\n                          event.target.value,\r\n                          index,\r\n                          \"questionTitle\"\r\n                        )\r\n                      }\r\n                      value={question.questionTitle}\r\n                      label={`Question ${index}*`}\r\n                      variant=\"standard\"\r\n                    />\r\n                    <FormControl\r\n                      variant=\"standard\"\r\n                      sx={{ m: 1, minWidth: 120 }}\r\n                    >\r\n                      <InputLabel id=\"demo-simple-select-standard-label\">\r\n                        Answer Type*\r\n                      </InputLabel>\r\n                      <Select\r\n                        labelId=\"demo-simple-select-standard-label\"\r\n                        id={\"demo-simple-select-standard-\" + index}\r\n                        value={question.answerType}\r\n                        onChange={(event) =>\r\n                          handleQuestionChange(\r\n                            event.target.value,\r\n                            index,\r\n                            \"answerType\"\r\n                          )\r\n                        }\r\n                        label=\"Answer Type*\"\r\n                      >\r\n                        <MenuItem value={\"Short Answer\"}>Short Answer</MenuItem>\r\n                        <MenuItem value={\"Paragraph\"}>Paragraph</MenuItem>\r\n                        <MenuItem value={\"Multiple Choice\"}>\r\n                          Multiple Choice\r\n                        </MenuItem>\r\n                        <MenuItem value={\"Checkbox\"}>Checkbox</MenuItem>\r\n                        <MenuItem value={\"DropDown\"}>DropDown</MenuItem>\r\n                        <MenuItem value={\"Date and Time\"}>\r\n                          Date and Time\r\n                        </MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                    {question.answerType && (\r\n                      <Answer\r\n                        question={question}\r\n                        index={index}\r\n                        cbToUpdate={handleOptionsChange}\r\n                        editable={true}\r\n                      />\r\n                    )}\r\n                    <div className=\"button-container\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        aria-label=\"outlined primary button\"\r\n                        onClick={() => duplicateQuestion(index)}\r\n                      >\r\n                        Duplicate\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        aria-label=\"outlined primary button\"\r\n                        onClick={() => removeQuestion(index)}\r\n                      >\r\n                        Remove\r\n                      </Button>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            onChange={(event) =>\r\n                              handleQuestionChange(\r\n                                event.target.checked,\r\n                                index,\r\n                                \"isRequired\"\r\n                              )\r\n                            }\r\n                          />\r\n                        }\r\n                        label=\"Mandatory\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )\r\n              );\r\n            })}\r\n        </div>\r\n        <Button\r\n          variant=\"outlined\"\r\n          aria-label=\"outlined primary button\"\r\n          onClick={addQuestion}\r\n        >\r\n          Add Question\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          aria-label=\"outlined primary button\"\r\n          onClick={saveForm}\r\n        >\r\n          Save Form\r\n        </Button>\r\n      </Box>\r\n      <Snackbar\r\n        open={message ? true : false}\r\n        autoHideDuration={3000}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={message?.split(\",\")[0] || \"success\"}\r\n          sx={{ width: \"100%\" }}\r\n        >\r\n          {message?.split(\",\")[1]}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\nimport { Box, Tabs, Tab } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { Preview } from \"./components/preview/preview\";\nimport { Formbuilder } from \"./components/form/formbuilder\";\n\nfunction App() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className=\"section\">\n      <h1>Welcome to Form Builder App</h1>\n      <div className=\"form-outer-section\">\n        <div className=\"form-section\">\n          <Box sx={{ width: \"100%\", bgcolor: \"background.paper\" }}>\n            <Tabs value={value} onChange={handleChange} centered>\n              <Tab label=\"Build Form\" />\n              <Tab label=\"Preview\" />\n            </Tabs>\n          </Box>\n          {value ? <Preview /> : <Formbuilder />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = {\r\n  formHeading: \"\",\r\n  formDescription: \"\",\r\n  questionsList: \"\",\r\n};\r\nconst formReducer = (state = initState, action) => {\r\n  if (action.type === \"save\") {\r\n    return {\r\n      ...state,\r\n      formHeading: action.formHeading,\r\n      formDescription: action.formDescription,\r\n      questionsList: action.questionsList,\r\n    };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default formReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport formReducer from \"./components/reducers/form-reducer\";\n\nconst store = createStore(formReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}