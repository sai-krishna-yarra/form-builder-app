{"version":3,"sources":["components/preview.js","components/answer.js","components/formbuilder.js","App.js","reportWebVitals.js","index.js"],"names":["Preview","className","style","background","Answer","answerType","noOfAnswers","React","useState","value","setValue","TextField","id","label","variant","multiline","rows","defaultValue","FormControl","component","RadioGroup","row","name","FormControlLabel","control","Radio","Checkbox","sx","m","minWidth","InputLabel","Select","labelId","onChange","event","target","MenuItem","Formbuilder","question","questionTitle","answersList","isRequired","answer","questionsList","setQuestionsList","handleQuestionChange","index","field","tempQuestionList","console","log","Box","width","margin","noValidate","autoComplete","length","map","cbToUpdate","Button","onClick","splice","duplicateQuestion","removeQuestion","Switch","checked","setTimeout","document","querySelector","scrollIntoView","behavior","block","inline","App","bgcolor","Tabs","newValue","centered","Tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8eda989a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./preview.css\";\r\nexport const Preview = () => {\r\n  return (\r\n    <div className=\"no-preview-container\">\r\n      <h5 style={{ background: \"linen\" }}>You have no Forms to Preview</h5>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  Radio,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport \"./answer.css\";\r\n\r\nexport const Answer = ({ answerType, noOfAnswers }) => {\r\n  const [value, setValue] = React.useState(\"\");\r\n  return (\r\n    <>\r\n      <h6>Please enter the Answer Below</h6>\r\n      <div className=\"answers-section\">\r\n        {answerType === \"Short Answer\" && (\r\n          <div>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Short Answer\"\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n        )}\r\n        {answerType === \"Paragraph\" && (\r\n          <div>\r\n            <TextField\r\n              id=\"standard-multiline-static\"\r\n              label=\"Paragraph Answer\"\r\n              multiline\r\n              rows={4}\r\n              defaultValue=\"\"\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n        )}\r\n        {answerType === \"Multiple Choice\" && (\r\n          <div>\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup\r\n                row\r\n                aria-label=\"gender\"\r\n                name=\"row-radio-buttons-group\"\r\n              >\r\n                <FormControlLabel\r\n                  value=\"female\"\r\n                  control={<Radio />}\r\n                  label=\"Option 1\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"male\"\r\n                  control={<Radio />}\r\n                  label=\"Option 2\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"other\"\r\n                  control={<Radio />}\r\n                  label=\"Option 3\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </div>\r\n        )}\r\n        {answerType === \"Checkbox\" && (\r\n          <div>\r\n            <FormControlLabel control={<Checkbox />} label=\"Option 1\" />\r\n            <FormControlLabel control={<Checkbox />} label=\"Option 2\" />\r\n            <FormControlLabel control={<Checkbox />} label=\"Option 3\" />\r\n          </div>\r\n        )}\r\n        {answerType === \"DropDown\" && (\r\n          <div>\r\n            <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n              <InputLabel id=\"demo-simple-select-standard-label\">\r\n                Answer\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-standard-label\"\r\n                id={\"demo-simple-select-standard\"}\r\n                value={value}\r\n                onChange={(event) => setValue(event.target.value)}\r\n                label=\"Answer\"\r\n              >\r\n                <MenuItem value={\"Option 1\"}>Option 1</MenuItem>\r\n                <MenuItem value={\"Option 2\"}>Option 2</MenuItem>\r\n                <MenuItem value={\"Option 3\"}>Option 3</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        )}\r\n        {answerType === \"Date and Time\" && <div>Coming Soon</div>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  FormControlLabel,\r\n  Switch,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Answer } from \"./answer\";\r\nimport \"./formbuilder.css\";\r\n\r\nexport const Formbuilder = () => {\r\n  const question = {\r\n    questionTitle: \"\",\r\n    answerType: \"\",\r\n    noOfAnswers: 0,\r\n    answersList: [],\r\n    isRequired: false,\r\n    answer: \"\",\r\n  };\r\n  const [questionsList, setQuestionsList] = useState([question, question]);\r\n\r\n  const addQuestion = () => {\r\n    setQuestionsList([...questionsList, question]);\r\n    setTimeout(() => {\r\n      document.querySelector(\".each-question:last-child\")?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"center\",\r\n        inline: \"nearest\",\r\n      });\r\n    }, 500);\r\n  };\r\n\r\n  const duplicateQuestion = (index) => {\r\n    const tempQuestionList = questionsList;\r\n    tempQuestionList.splice(index + 1, 0, tempQuestionList[index]);\r\n    setQuestionsList([...tempQuestionList]);\r\n  };\r\n\r\n  const removeQuestion = (index) => {\r\n    const tempQuestionList = questionsList;\r\n    tempQuestionList.splice(index, 1);\r\n    setQuestionsList([...tempQuestionList]);\r\n  };\r\n\r\n  const handleQuestionChange = (value, index, field) => {\r\n    const tempQuestionList = questionsList;\r\n    tempQuestionList[index][field] = value;\r\n    setQuestionsList([...tempQuestionList]);\r\n    console.log(tempQuestionList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-builder-section\">\r\n      <Box\r\n        component=\"form\"\r\n        sx={{\r\n          \"& > :not(style)\": { m: \"1\", width: \"28ch\", margin: \"28px 30px\" },\r\n        }}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n      >\r\n        <TextField\r\n          id=\"formTitle\"\r\n          label=\"Form Title\"\r\n          variant=\"standard\"\r\n          key=\"Confirmation Code\"\r\n        />\r\n        <TextField\r\n          id=\"formDescription\"\r\n          label=\"Form Description (Optional)\"\r\n          variant=\"standard\"\r\n        />\r\n        <div>\r\n          {questionsList.length > 0 &&\r\n            questionsList.map((question, index) => {\r\n              return (\r\n                index > 0 && (\r\n                  <div key={index} className=\"each-question\">\r\n                    <TextField\r\n                      onChange={(event) =>\r\n                        handleQuestionChange(\r\n                          event.target.value,\r\n                          index,\r\n                          \"questionTitle\"\r\n                        )\r\n                      }\r\n                      id=\"formDescription\"\r\n                      label={`Question ${index}*`}\r\n                      variant=\"standard\"\r\n                    />\r\n                    <FormControl\r\n                      variant=\"standard\"\r\n                      sx={{ m: 1, minWidth: 120 }}\r\n                    >\r\n                      <InputLabel id=\"demo-simple-select-standard-label\">\r\n                        Answer Type*\r\n                      </InputLabel>\r\n                      <Select\r\n                        labelId=\"demo-simple-select-standard-label\"\r\n                        id={\"demo-simple-select-standard-\" + index}\r\n                        value={question.answerType}\r\n                        onChange={(event) =>\r\n                          handleQuestionChange(\r\n                            event.target.value,\r\n                            index,\r\n                            \"answerType\"\r\n                          )\r\n                        }\r\n                        label=\"Answer Type*\"\r\n                      >\r\n                        <MenuItem value={\"Short Answer\"}>Short Answer</MenuItem>\r\n                        <MenuItem value={\"Paragraph\"}>Paragraph</MenuItem>\r\n                        <MenuItem value={\"Multiple Choice\"}>\r\n                          Multiple Choice\r\n                        </MenuItem>\r\n                        <MenuItem value={\"Checkbox\"}>Checkbox</MenuItem>\r\n                        <MenuItem value={\"DropDown\"}>DropDown</MenuItem>\r\n                        <MenuItem value={\"Date and Time\"}>Date and Time</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                    {question.answerType && (\r\n                      <Answer\r\n                        answerType={question.answerType}\r\n                        cbToUpdate={handleQuestionChange}\r\n                      />\r\n                    )}\r\n                    <div className=\"button-container\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        aria-label=\"outlined primary button\"\r\n                        onClick={() => duplicateQuestion(index)}\r\n                      >\r\n                        Duplicate\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        aria-label=\"outlined primary button\"\r\n                        onClick={() => removeQuestion(index)}\r\n                      >\r\n                        Remove\r\n                      </Button>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            onChange={(event) =>\r\n                              handleQuestionChange(\r\n                                event.target.checked,\r\n                                index,\r\n                                \"isRequired\"\r\n                              )\r\n                            }\r\n                          />\r\n                        }\r\n                        label=\"Mandatory\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )\r\n              );\r\n            })}\r\n        </div>\r\n        <Button\r\n          variant=\"contained\"\r\n          aria-label=\"outlined primary button\"\r\n          onClick={addQuestion}\r\n        >\r\n          Add Question\r\n        </Button>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\nimport { Box, Tabs, Tab } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { Preview } from \"./components/preview\";\nimport { Formbuilder } from \"./components/formbuilder\";\n\nfunction App() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className=\"section\">\n      <h1>Welcome to Form Builder App</h1>\n      <div className=\"form-outer-section\">\n        <div className=\"form-section\">\n          <Box sx={{ width: \"100%\", bgcolor: \"background.paper\" }}>\n            <Tabs value={value} onChange={handleChange} centered>\n              <Tab label=\"Build Form\" />\n              <Tab label=\"Preview\" />\n            </Tabs>\n          </Box>\n          {value ? <Preview /> : <Formbuilder />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}